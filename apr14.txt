Signal introduction: Signals are widely used and which are use to handle exceptional or unwanted cases which occurs during the execution of a program.
signal names start with SIG. Like,signal SIGABRT is generated when an ongoing program cause unexpected or abnormal termination. 
Signals are defined in <signal.h> header file by a positive ineteger constant called signal number.
There occur many situations which causes signals to be generated. some of these are following:
1. Abnormal termination of a program using keyboard interrupt(Control-C or CONTROL-Z) causes the SIGABRT signal.
2. There are differnent-different signal generated by hardware and software abnomallies.

Normally there are some actions which are used to handle signals.
1. Ignore the signals but signals like SIGKILL and SIGSTOP they never can be ignored.
2. let signals do there default action as every signal is associated with some default exception.
3. Catch the signal or we can say passing control to some other function whenever a signal occurs.

These things will be more clear, once we will understand the syntax of signla function.
Default action are labelled with specific names like "Terminate", "ignore", "stop process", "terrminate+core".
"terminate+core" means that a memory image of the process for which signal is generated is left in the core file of the current working directory but it does not happen in every condition. 
There  are some conditons,where core file is not generated. for the generation of the core file for any process, you must be the owner of that program file, you must have the write permission in that current working directory, or the process was set used id or set group id nd current user is not the owner of the program file.

Signal function:
#include<signal.h>
void (*signal(int signo, void(*func)(int)))(int);

This function returns the previous disposition of the signal if ok and SIG_ERR on error.
In this function signo is the interger defined for each signal name.
The value of the function is:
1. The constant SIG_IGN(ignore the signal).
2. The constant SIG_DFL(do the default action).
3. or, the address of the function to be called when signal occurs(catching the signal).


Unreliable signal:
In the previous versions of unix, signals remained unreliable there are some reasons considered:
1. in earlier implementaions of unix return type of the signal function was int as they did not support the return type in earlier versions.
2. after occuring of interrupt, when signal is called and in between that time if interrupt occurs many times and then it may cause the default action associated with signals to happen and in previous version there was one more problem that default action was only ignoring the signal and in this way, signals were unreliable.

